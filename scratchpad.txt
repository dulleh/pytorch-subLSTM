























































(base) bash-4.2$ python run.py --verbose --timing --model=subLSTMCuda --cuda --batch-size=3 --seq-length=7 --nhid=2 --epochs=1 --training-size=7
cuda is available: True
cudnn enabled: True
Training subLSTMCuda model with parameters:
	number of layers: 1
	hidden units: 2
	max epochs: 1
	batch size: 3
	optimizer: rmsprop, lr=0.0001, l2=0
	using CUDA
training epoch 1
dE/dh0.01 *
-2.0290  2.7442
 -6.8647  9.2844
  5.5416 -7.4950
[ CUDAFloatType{3,2} ]
grad_cell 0  0
 0  0
 0  0
[ CUDAFloatType{3,2} ]
new_cell-0.0321  0.9393
-0.0242  0.8467
 0.0110  0.8795
[ CUDAFloatType{3,2} ]
input_gate 0.5361  0.2002
 0.5110  0.2517
 0.5107  0.2630
[ CUDAFloatType{3,2} ]
output_gate 0.2663  0.6520
 0.3032  0.6518
 0.3073  0.6554
[ CUDAFloatType{3,2} ]
candidate_cell 0.5946  0.6204
 0.5361  0.6485
 0.5282  0.6551
[ CUDAFloatType{3,2} ]
X-0.0038  0.1337  0.9442  0.0000
 0.1428  0.0621  0.4712  0.0000
 0.1907  0.0474  0.4006  0.0000
[ CUDAFloatType{3,4} ]
gate_weights.sizes()[3, 4, 2]
gate_weights(1,.,.) =
  0.1446 -1.3848
 -1.0133  0.6277
  0.3829  0.4913
 -0.3046  0.5761

(2,.,.) =
  0.0441 -1.0894
 -0.8320  0.6269
  0.1446  0.6122
  0.0256  0.2734

(3,.,.) =
  0.0427 -1.0304
 -0.8125  0.6429
  0.1131  0.6414
  0.0827  0.2280
[ CUDAFloatType{3,4,2} ]
weights.sizes()[8, 4]
weights 0.6010  0.5108  0.3214  0.6770
 0.6453  0.4694 -0.4958  0.2441
-0.2626  0.1918 -0.4936  0.5788
 0.6845  0.4401  0.1471 -0.4400
 0.0896 -0.4237  0.5956 -0.3823
 0.4720  0.2928 -0.1539 -0.2095
 0.2722 -0.1878 -0.5853  0.2427
 0.0263  0.2287  0.6134  0.0776
[ CUDAFloatType{8,4} ]
old_cell-0.2133  0.8109
-0.0973  0.7923
-0.0126  0.8755
[ CUDAFloatType{3,2} ]
dE/dh0.01 *
-0.4512 -0.0665
 -1.6096 -0.2127
  1.3099  0.1582
[ CUDAFloatType{3,2} ]
grad_cell0.01 *
-0.2152  0.3550
 -0.8689  1.1076
  0.7213 -0.8649
[ CUDAFloatType{3,2} ]
new_cell-0.2133  0.8109
-0.0973  0.7923
-0.0126  0.8755
[ CUDAFloatType{3,2} ]
input_gate 0.6736  0.3358
 0.4810  0.2520
 0.5142  0.2649
[ CUDAFloatType{3,2} ]
output_gate 0.4506  0.5586
 0.3329  0.6262
 0.3061  0.6585
[ CUDAFloatType{3,2} ]
candidate_cell 0.4187  0.6187
 0.5013  0.6402
 0.5288  0.6568
[ CUDAFloatType{3,2} ]
X 0.2686  0.0389  0.2838  1.0000
-0.0269  0.1281  0.3099  0.0000
 0.2056  0.0535  0.4066  0.0000
[ CUDAFloatType{3,4} ]
gate_weights.sizes()[3, 4, 2]
gate_weights(1,.,.) =
  0.7246 -0.6821
 -0.1981  0.2353
 -0.3281  0.4841
  0.4166  0.2341

(2,.,.) =
 -0.0761 -1.0879
 -0.6951  0.5161
  0.0054  0.5763
  0.0614  0.1851

(3,.,.) =
  0.0566 -1.0209
 -0.8183  0.6566
  0.1155  0.6493
  0.0821  0.2335
[ CUDAFloatType{3,4,2} ]
weights.sizes()[8, 4]
weights 0.6010  0.5108  0.3214  0.6770
 0.6453  0.4694 -0.4958  0.2441
-0.2626  0.1918 -0.4936  0.5788
 0.6845  0.4401  0.1471 -0.4400
 0.0896 -0.4237  0.5956 -0.3823
 0.4720  0.2928 -0.1539 -0.2095
 0.2722 -0.1878 -0.5853  0.2427
 0.0263  0.2287  0.6134  0.0776
[ CUDAFloatType{8,4} ]
old_cell 0.0691  0.9457
-0.2284  0.7400
-0.0524  0.8663
[ CUDAFloatType{3,2} ]
dE/dh0.001 *
 0.0255  0.8462
  0.5726  2.9131
 -0.3749 -2.4175
[ CUDAFloatType{3,2} ]
grad_cell0.001 *
-1.4540  1.0272
 -4.3766  3.0544
  3.6588 -2.5108
[ CUDAFloatType{3,2} ]
new_cell 0.0691  0.9457
-0.2284  0.7400
-0.0524  0.8663
[ CUDAFloatType{3,2} ]
input_gate 0.5624  0.2186
 0.6595  0.3487
 0.5259  0.2177
[ CUDAFloatType{3,2} ]
output_gate 0.2486  0.6814
 0.4701  0.5489
 0.2813  0.6505
[ CUDAFloatType{3,2} ]
candidate_cell 0.6121  0.6411
 0.3973  0.6213
 0.5710  0.6300
[ CUDAFloatType{3,2} ]
X 0.2517  0.0328  0.9569  0.0000
 0.2466  0.0339  0.1352  1.0000
 0.0327  0.1216  0.7675  0.0000
[ CUDAFloatType{3,4} ]
gate_weights.sizes()[3, 4, 2]
gate_weights(1,.,.) =
  0.2507 -1.2736
 -1.1060  0.7601
  0.4561  0.5803
 -0.2235  0.5676

(2,.,.) =
  0.6611 -0.6250
 -0.1199  0.1962
 -0.4165  0.4951
  0.4985  0.1412

(3,.,.) =
  0.1036 -1.2793
 -0.9379  0.6214
  0.2860  0.5321
 -0.1890  0.4659
[ CUDAFloatType{3,4,2} ]
weights.sizes()[8, 4]
weights 0.6010  0.5108  0.3214  0.6770
 0.6453  0.4694 -0.4958  0.2441
-0.2626  0.1918 -0.4936  0.5788
 0.6845  0.4401  0.1471 -0.4400
 0.0896 -0.4237  0.5956 -0.3823
 0.4720  0.2928 -0.1539 -0.2095
 0.2722 -0.1878 -0.5853  0.2427
 0.0263  0.2287  0.6134  0.0776
[ CUDAFloatType{8,4} ]
old_cell 0.0435  0.8198
 0.0543  0.8730
-0.2154  0.7389
[ CUDAFloatType{3,2} ]
dE/dh0.0001 *
-0.4261  0.8948
 -2.3992  2.4661
  1.2392 -1.4736
[ CUDAFloatType{3,2} ]
grad_cell0.001 *
-0.2842  0.5272
 -1.6059  1.2160
  0.7081 -1.2574
[ CUDAFloatType{3,2} ]
new_cell 0.0435  0.8198
 0.0543  0.8730
-0.2154  0.7389
[ CUDAFloatType{3,2} ]
input_gate 0.5397  0.2102
 0.5429  0.2324
 0.6847  0.2865
[ CUDAFloatType{3,2} ]
output_gate 0.2591  0.6614
 0.2670  0.6715
 0.4136  0.5551
[ CUDAFloatType{3,2} ]
candidate_cell 0.6027  0.6300
 0.5858  0.6453
 0.4691  0.5957
[ CUDAFloatType{3,2} ]
X 0.1382  0.0222  0.9007  0.0000
 0.2367  0.0178  0.7646  0.0000
 0.1880  0.0188  0.6246  1.0000
[ CUDAFloatType{3,4} ]
gate_weights.sizes()[3, 4, 2]
gate_weights(1,.,.) =
  0.1590 -1.3239
 -1.0505  0.6694
  0.4169  0.5323
 -0.2195  0.5277

(2,.,.) =
  0.1722 -1.1950
 -1.0099  0.7148
  0.3465  0.5984
 -0.1122  0.4457

(3,.,.) =
  0.7755 -0.9124
 -0.3490  0.2214
 -0.1239  0.3878
  0.1990  0.4364
[ CUDAFloatType{3,4,2} ]
weights.sizes()[8, 4]
weights 0.6010  0.5108  0.3214  0.6770
 0.6453  0.4694 -0.4958  0.2441
-0.2626  0.1918 -0.4936  0.5788
 0.6845  0.4401  0.1471 -0.4400
 0.0896 -0.4237  0.5956 -0.3823
 0.4720  0.2928 -0.1539 -0.2095
 0.2722 -0.1878 -0.5853  0.2427
 0.0263  0.2287  0.6134  0.0776
[ CUDAFloatType{8,4} ]
old_cell-0.0439  0.6358
 0.0244  0.7547
 0.0004  0.7074
[ CUDAFloatType{3,2} ]
dE/dh0.0001 *
 0.0447  0.3232
  0.5142  1.9308
 -0.0130 -0.9081
[ CUDAFloatType{3,2} ]
grad_cell0.0001 *
-0.6111  2.2049
 -3.8602  4.8316
  2.3070 -4.8347
[ CUDAFloatType{3,2} ]
new_cell-0.0439  0.6358
 0.0244  0.7547
 0.0004  0.7074
[ CUDAFloatType{3,2} ]
input_gate 0.4683  0.2921
 0.5340  0.2251
 0.5020  0.2672
[ CUDAFloatType{3,2} ]
output_gate 0.3508  0.6316
 0.2694  0.6624
 0.3121  0.6510
[ CUDAFloatType{3,2} ]
candidate_cell 0.4732  0.6612
 0.5855  0.6386
 0.5229  0.6560
[ CUDAFloatType{3,2} ]
X 0.1428  0.0150  0.0146  0.0000
 0.1792  0.0131  0.7681  0.0000
 0.2020  0.0079  0.3346  0.0000
[ CUDAFloatType{3,4} ]
gate_weights.sizes()[3, 4, 2]
gate_weights(1,.,.) =
 -0.1268 -0.8851
 -0.6156  0.5390
 -0.1074  0.6687
  0.3017 -0.0175

(2,.,.) =
  0.1364 -1.2361
 -0.9975  0.6740
  0.3455  0.5694
 -0.1291  0.4453

(3,.,.) =
  0.0081 -1.0089
 -0.7905  0.6236
  0.0915  0.6454
  0.1318  0.1788
[ CUDAFloatType{3,4,2} ]
weights.sizes()[8, 4]
weights 0.6010  0.5108  0.3214  0.6770
 0.6453  0.4694 -0.4958  0.2441
-0.2626  0.1918 -0.4936  0.5788
 0.6845  0.4401  0.1471 -0.4400
 0.0896 -0.4237  0.5956 -0.3823
 0.4720  0.2928 -0.1539 -0.2095
 0.2722 -0.1878 -0.5853  0.2427
 0.0263  0.2287  0.6134  0.0776
[ CUDAFloatType{8,4} ]
old_cell-0.0848  0.5382
-0.0580  0.5598
-0.0384  0.5851
[ CUDAFloatType{3,2} ]
dE/dh1e-05 *
-0.3176  0.4200
 -0.4848  2.2609
  0.2587 -2.1352
[ CUDAFloatType{3,2} ]
grad_cell0.0001 *
-0.1955  0.5779
 -0.7845  2.0511
  0.6534 -1.5432
[ CUDAFloatType{3,2} ]
new_cell-0.0848  0.5382
-0.0580  0.5598
-0.0384  0.5851
[ CUDAFloatType{3,2} ]
input_gate 0.4677  0.2495
 0.4881  0.2216
 0.5055  0.2128
[ CUDAFloatType{3,2} ]
output_gate 0.3360  0.6164
 0.3063  0.6233
 0.2884  0.6343
[ CUDAFloatType{3,2} ]
candidate_cell 0.5007  0.6365
 0.5428  0.6240
 0.5664  0.6226
[ CUDAFloatType{3,2} ]
X-0.0382  0.0663  0.2633  0.0000
-0.0594  0.0693  0.5520  0.0000
-0.0192  0.0636  0.7026  0.0000
[ CUDAFloatType{3,4} ]
gate_weights.sizes()[3, 4, 2]
gate_weights(1,.,.) =
 -0.1294 -1.1011
 -0.6810  0.4743
  0.0028  0.5601
  0.0972  0.1421

(2,.,.) =
 -0.0478 -1.2565
 -0.8174  0.5036
  0.1716  0.5065
 -0.0781  0.3193

(3,.,.) =
  0.0218 -1.3079
 -0.9034  0.5507
  0.2673  0.5006
 -0.1542  0.4115
[ CUDAFloatType{3,4,2} ]
weights.sizes()[8, 4]
weights 0.6010  0.5108  0.3214  0.6770
 0.6453  0.4694 -0.4958  0.2441
-0.2626  0.1918 -0.4936  0.5788
 0.6845  0.4401  0.1471 -0.4400
 0.0896 -0.4237  0.5956 -0.3823
 0.4720  0.2928 -0.1539 -0.2095
 0.2722 -0.1878 -0.5853  0.2427
 0.0263  0.2287  0.6134  0.0776
[ CUDAFloatType{8,4} ]
old_cell-0.2246  0.2825
-0.2346  0.2718
-0.2153  0.2915
[ CUDAFloatType{3,2} ]
dE/dh1e-06 *
 0.3951  2.0266
  1.8396  6.8491
 -1.3212 -5.3516
[ CUDAFloatType{3,2} ]
grad_cell1e-05 *
-0.5790  1.7093
 -1.8694  7.1828
  1.4216 -5.8773
[ CUDAFloatType{3,2} ]
new_cell-0.2246  0.2825
-0.2346  0.2718
-0.2153  0.2915
[ CUDAFloatType{3,2} ]
input_gate 0.6228  0.3080
 0.6113  0.3243
 0.6330  0.2939
[ CUDAFloatType{3,2} ]
output_gate 0.4822  0.5038
 0.5010  0.4982
 0.4656  0.5088
[ CUDAFloatType{3,2} ]
candidate_cell 0.3982  0.5905
 0.3767  0.5961
 0.4177  0.5854
[ CUDAFloatType{3,2} ]
X 0.0000  0.0000  0.1542  1.0000
 0.0000  0.0000  0.0023  1.0000
 0.0000  0.0000  0.2896  1.0000
[ CUDAFloatType{3,4} ]
gate_weights.sizes()[3, 4, 2]
gate_weights(1,.,.) =
  0.5017 -0.8094
 -0.0710  0.0153
 -0.4130  0.3659
  0.4267  0.1386

(2,.,.) =
  0.4528 -0.7341
  0.0039 -0.0071
 -0.5034  0.3893
  0.5156  0.0454

(3,.,.) =
  0.5452 -0.8765
 -0.1379  0.0352
 -0.3323  0.3451
  0.3474  0.2217
[ CUDAFloatType{3,4,2} ]
weights.sizes()[8, 4]
weights 0.6010  0.5108  0.3214  0.6770
 0.6453  0.4694 -0.4958  0.2441
-0.2626  0.1918 -0.4936  0.5788
 0.6845  0.4401  0.1471 -0.4400
 0.0896 -0.4237  0.5956 -0.3823
 0.4720  0.2928 -0.1539 -0.2095
 0.2722 -0.1878 -0.5853  0.2427
 0.0263  0.2287  0.6134  0.0776
[ CUDAFloatType{8,4} ]
old_cell 0  0
 0  0
 0  0
[ CUDAFloatType{3,2} ]
weights.grad:
tensor([[-1.2070e-04,  4.5008e-04,  1.9993e-03,  1.0211e-03],
        [-1.2592e-05, -2.9037e-04, -1.4734e-03, -7.6706e-04],
        [-5.9108e-04,  1.2290e-03,  6.1968e-03,  9.4415e-04],
        [-1.9085e-05, -1.2529e-03, -8.8855e-03, -5.2188e-04],
        [ 1.0127e-04, -4.4851e-04, -1.9670e-03, -1.1023e-03],
        [ 1.9397e-05,  3.8178e-04,  2.0509e-03,  7.8026e-04],
        [-5.7299e-06,  1.0336e-04,  4.5438e-04, -7.2841e-05],
        [-4.5990e-05,  2.9184e-04,  1.5033e-03,  7.8825e-04]], device='cuda:0')
bias.grad
tensor([ 0.0035, -0.0025,  0.0085, -0.0105, -0.0035,  0.0033,  0.0009,  0.0023],
       device='cuda:0')
../torch/csrc/utils/python_arg_parser.cpp:698: UserWarning: This overload of addcmul_ is deprecated:
	addcmul_(Number value, Tensor tensor1, Tensor tensor2)
Consider using one of the following signatures instead:
	addcmul_(Tensor tensor1, Tensor tensor2, Number value)
run.py:288: RuntimeWarning: invalid value encountered in double_scalars
  np.sum(epoch_trace) / len(epoch_trace),
epoch 1 finished
	time for this epoch 17.50464677810669
	training_loss =   nan
	validation_loss = 0.2498
total time to train 17.50464677810669
Training ended:
	test loss 0.3352

















--model=subLSTM --cuda --batch-size=4 --seq-length=10 --nhid=500 --epochs=10 --training-size=400
cuda is available: True
cudnn enabled: True
total time to train 17.231553077697754

--model=subLSTMCuda --cuda --batch-size=4 --seq-length=10 --nhid=500 --epochs=10 --training-size=400
cuda is available: True
cudnn enabled: True
total time to train 24.681370735168457
